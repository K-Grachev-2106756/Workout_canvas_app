import React from "react";
import { useState, useEffect } from 'react';
import "./App.css";
import { TaskList } from './pages/TaskList';
import {
  createSmartappDebugger,
  createAssistant,
} from "@salutejs/client";

/*import { TaskList } from './pages/TaskList';*/

const initializeAssistant = (getState/*: any*/) => {
  if (process.env.NODE_ENV === "development") {
    return createSmartappDebugger({
      token: process.env.REACT_APP_TOKEN ?? "",
      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,
      getState,
    });
  }
  return createAssistant({ getState });
};

export class App extends React.Component {

  constructor(props) {
    super(props);
    console.log('constructor');

    this.state = {
      notes: [],
    }

    this.assistant = initializeAssistant(() => this.getStateForAssistant() );
    this.assistant.on("data", (event/*: any*/) => {
      console.log(`assistant.on(data)`, event);
      const { action } = event
      this.dispatchAssistantAction(action);
    });
    this.assistant.on("start", (event) => {
      console.log(`assistant.on(start)`, event);
    });

  }

  componentDidMount() {
    console.log('componentDidMount');
  }

  getStateForAssistant () {
    console.log('getStateForAssistant: this.state:', this.state)
    const state = {
      item_selector: {
        items: this.state.notes.map(
          ({ id, title }, index) => ({
            number: index + 1,
            id,
            title,
          })
        ),
      },
    };
    console.log('getStateForAssistant: state:', state)
    return state;
  }

  dispatchAssistantAction (action) {
    console.log('dispatchAssistantAction', action);
    if (action) {
      switch (action.type) {
        case 'add_note':
          return this.add_note(action);

        case 'done_note':
          return this.done_note(action);

        case 'delete_note':
          return this.delete_note(action);

        default:
          throw new Error();
      }
    }
  }

  add_note (action) {
    console.log('add_note', action);
    this.setState({
      notes: [
        ...this.state.notes,
        {
          id:        Math.random().toString(36).substring(7),
          title:     action.note,
          completed: false,
        },
      ],
    })
  }

  done_note (action) {
    console.log('done_note', action);
    this.setState({
      notes: this.state.notes.map((note) =>
        (note.id === action.id)
        ? { ...note, completed: !note.completed }
        : note
      ),
    })
  }

  delete_note (action) {
    console.log('delete_note', action);
    this.setState({
      notes: this.state.notes.filter(({ id }) => id !== action.id),
    })
  }

  render() {
    console.log('render');
    return (
      <TaskList
        items  = {this.state.notes}
        onAdd  = {(note) => { this.add_note({ type: "add_note", note }); }}
        onDone = {(note) => { this.done_note({ type: "done_note", id: note.id }) }}
      />
    )
  }


}

// const globalMode = 'timergym';
const globalMode = 'timergym';
const formatTime = (time) => {
  const minutes = Math.floor(time / 60).toString().padStart(2, '0');
  const seconds = (time % 60).toString().padStart(2, '0');
  return `${minutes}:${seconds}`;
};

// WORK, CHILL, TRAIN_OVER, MENU,  

const Stopwatch = () => {
  const [timerInterval, setTimerInterval] = useState(null);
  const [seconds, setSeconds] = useState(0);
  const [minutes, setMinutes] = useState(0);
  const [hours, setHours] = useState(0);
  
  useEffect(() => {
    return () => clearInterval(timerInterval);
  }, [timerInterval]);

  function startTimer() {
    setTimerInterval(setInterval(() => {
      setSeconds(s => s + 1);
    }, 1000));
  }
  
  function stopTimer() {
    clearInterval(timerInterval);
    setTimerInterval(null);
  }
  
  function resetTimer() {
    setSeconds(0);
    setMinutes(0);
    setHours(0);
    stopTimer();
  }
  
  function pad(num) {
    return num < 10 ? "0" + num : num;
  }
  
  return (
    <div>
      <div id="time">
        {pad(hours)}:{pad(minutes)}:{pad(seconds)}
      </div>
      <div className="controls">
        <table>
          <div><button id="reset" className="button" onClick={resetTimer}>RESET</button></div>
          <div><button id="start" className="button" onClick={timerInterval ? stopTimer : startTimer}>{timerInterval ? "STOP" : "START"}</button></div>
        </table>
      </div>
    </div>
  );
};

const TimerGym = () => {
  const [workTimeConst, setWorkTimeConst] = useState(0);
  const [chillTimeConst, setChillTimeConst] = useState(0);
  const [repToEnd, setRepToEnd] = useState(0);
  const [currentMode, setCurrentMode] = useState('WORK');
  const [isRunning, setIsRunning] = useState(false);
  const [timeLeft, setTimeLeft] = useState(0);

  const handleStart = () => {
    // Get the values of the input fields
    const rawWorkMin = parseInt(document.getElementById('min_input_work').value) || 0;
    const rawWorkSec = parseInt(document.getElementById('sec_input_work').value) || 0;
    const rawChillMin = parseInt(document.getElementById('min_input_chill').value) || 0;
    const rawChillSec = parseInt(document.getElementById('sec_input_chill').value) || 0;

    // Clamp the values to the allowed range
    const workMin = Math.max(0, Math.min(59, rawWorkMin));
    const workSec = Math.max(0, Math.min(59, rawWorkSec));
    const chillMin = Math.max(0, Math.min(59, rawChillMin));
    const chillSec = Math.max(0, Math.min(59, rawChillSec));

    // Save the constants for later use
    setWorkTimeConst(workMin * 60 + workSec);
    setChillTimeConst(chillMin * 60 + chillSec);
    setRepToEnd(parseInt(document.getElementById('rep_input').value) || 0);

    // Set the initial state
    setCurrentMode('WORK');
    setIsRunning(true);
    setTimeLeft(workMin * 60 + workSec);
  };

  const handlePause = () => {
    setIsRunning(false);
  };

  const handleReset = () => {
    setIsRunning(false);
    setWorkTimeConst(0);
    setChillTimeConst(0);
    setRepToEnd(0);
    setCurrentMode('WORK');
    setTimeLeft(0);

    // Reset the input fields
    // document.getElementById('min_input_work').value = '';
    // document.getElementById('min_input_chill').value = '';
    // document.getElementById('sec_input_work').value = '';
    // document.getElementById('sec_input_chill').value = '';
    // document.getElementById('rep_input').value = '';
  };

  useEffect(() => {
    let timer = null;
    if (isRunning) {
      timer = setInterval(() => {
        setTimeLeft((prevTimeLeft) => {
          const newTimeLeft = prevTimeLeft - 1;
          if (newTimeLeft <= 0) {
            if ((currentMode === 'WORK') && (repToEnd === 0)) {
              setIsRunning(false);
            } else if (currentMode === 'WORK') {
              setCurrentMode('CHILL');
              setTimeLeft(chillTimeConst);
            } else if (repToEnd > 1) {
              setCurrentMode('WORK');
              setRepToEnd((prevRepToEnd) => prevRepToEnd - 1);
              setTimeLeft(workTimeConst);
            } else {
              setIsRunning(false);
            }
          }
          return newTimeLeft;
        });
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [isRunning, currentMode, workTimeConst, chillTimeConst, repToEnd]);



  const training_with_breaks_active = <div>
      <div>
        <div>{currentMode}</div>
        <div id = "time">{formatTime(timeLeft)}</div>
        <div>Repetitions left: {repToEnd}</div>
      </div>
      <div className='controls'>
        <table>
          {/* <div><button className = "button" id = "start" onClick={handleStart}>START</button></div> */}
          {/* <div><button className = "button" id = "pause" onClick={handlePause}>PAUSE</button></div> */}
          <div><button className = "button" id = "reset" onClick={handleReset}>RESET</button></div>
        </table>
      </div>
    </div>

  const training_with_breaks_input = <div>
      <div className="inputs">
        <table>
          <tr id="time_name">
            <th >Min</th><th></th><th >Sec</th>
          </tr>
          <tr>
            <td>
              <input type="number" id="min_input_work" min="0" max="59" placeholder="00" />
            </td>
            <td id="separator">:</td>
            <td>
              <input type="number" id="sec_input_work" min="0" max="59" placeholder="00" />
            </td>
          </tr>
          <tr>
            <td>
              <input type="number" id="min_input_chill" min="0" max="59" placeholder="00" />
            </td>
            <td id="separator">:</td>
            <td>
              <input type="number" id="sec_input_chill" min="0" max="59" placeholder="00" />
            </td>
          </tr>
          <tr >
            <td colSpan="3"><input type="number" id="rep_input" placeholder="Repeat" /></td>
          </tr>
        </table> 
      </div>
      <div className="controls">
        <table>
          <div><button id = "start" className = "button" onClick={handleStart}>START</button></div>
          <div><button id = "reset" className = "button" onClick={handleReset}>RESET</button></div>
        </table>
      </div>
    </div>


  return (
    <>
      {isRunning ? (
        training_with_breaks_active
      ) : (
        training_with_breaks_input
      )}
    </>
  );
};

const Menu = () => {
  if (globalMode === 'stopwatch') {
    return Stopwatch();
  }
  else if (globalMode === 'timergym') {
    return TimerGym();
  }
}
export default Menu;